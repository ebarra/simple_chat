<!doctype html>
<html class="no-js" lang="">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
          <title><%=typeof title == 'undefined' ? 'Simple Chat' : title%></title>
        <meta name="description" content="Mi primera webapp, un chat simple">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!--
            Stylesheets and Preprocessors
            ==============================

            You can always bring in CSS files manually with `<link>` tags, or asynchronously
            using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
            of Sails' conventional asset pipeline (boilerplate Gruntfile).

            By default, stylesheets from your `assets/styles` folder are included
            here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
            are supported. In production, your styles will be minified and concatenated into
            a single file.

            To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
            For example, here are a few things you could do:

                + Change the order of your CSS files
                + Import stylesheets from other directories
                + Use a different or additional preprocessor, like SASS, SCSS or Stylus
        -->

        <!--STYLES-->
        <link rel="stylesheet" href="/styles/importer.css">
        <link rel="stylesheet" href="/styles/main.css">
        <link rel="stylesheet" href="/styles/normalize.css">
        <link rel="stylesheet" href="/styles/normalize.min.css">
        <link rel="stylesheet" href="/fonts/font-awesome/css/font-awesome.css">
        <!--STYLES END-->

    </head>
    <body>
      <%if (typeof flash !== 'undefined' && flash){%>
          <% if (flash && flash.err) { %>
            <script>
              console.log("FLASH: <%=flash%>");
            </script>
                <ul class='alert'>
                  <% Object.keys(flash.err).forEach(function(error){ %>
                    <li><%= JSON.stringify(flash.err[error]) %></li>
                  <% }) %>
                </ul>
          <% } %>
          <% if (flash && flash.info) { %>
            <%console.log(flash)%>
            <div data-alert class="alert-box success radius">

                <%= flash.info %>
                <a href="#" class="close">&times;</a>
            </div>
          <% } %>
      <%}%>

      <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/fastclick.js"></script>
    <script src="/js/dependencies/jquery-1.11.2.min.js"></script>
    <script src="/js/dependencies/lodash.js"></script>
    <script src="/js/dependencies/modernizr-2.8.3.min.js"></script>
    <script src="/js/main.js"></script>
    <script src="/js/chat.js"></script>
    <script src="/js/main_carlosapa.js"></script>
    <script src="/js/utils.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
